# Install nginx package
package { 'nginx':
  ensure => installed,
}

# Ensure Nginx service is running and enabled
service { 'nginx':
  ensure  => 'running',
  enable  => true,
  require => Package['nginx'],
}

# Allow Nginx HTTP traffic
class { 'ufw':
  allow  => ['Nginx HTTP'],
}

# Set up index page
file { '/var/www/html/index.nginx-debian.html':
  ensure  => file,
  content => "Hello World!\n",
  require => Package['nginx'],
}

# Set up custom 404 page
file { '/var/www/html/404.html':
  ensure  => file,
  content => "Ceci n'est pas une page\n",
  require => Package['nginx'],
}

# Configure Nginx server
file { '/etc/nginx/sites-available/default':
  ensure  => file,
  content => template('nginx/default.erb'),
  require => Package['nginx'],
  notify  => Service['nginx'],
}

# Define Nginx default configuration template
file { '/etc/nginx/sites-available/default.erb':
  ensure => file,
  content => "# Generated by Puppet\nserver {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;

    server_name _;

    location / {
        try_files \$uri \$uri/ =404;
        add_header X-Served-By \$hostname;
    }
    error_page 404 /404.html;

    location = /404.html {
        root /var/www/html;
        internal;
    }

    location /redirect_me {
        return 301 https://www.youtube.com/watch?v=QH2-TGUlwu4;
    }
}\n",
  require => Package['nginx'],
  notify  => Service['nginx'],
}

# Ensure ownership and permissions for web files
file { '/var/www/html':
  ensure => directory,
  owner  => 'www-data',
  group  => 'www-data',
  mode   => '0755',
  recurse => true,
}

# Restart Nginx service if configuration changes
service { 'nginx':
  ensure  => 'running',
  enable  => true,
  require => Package['nginx'],
}
